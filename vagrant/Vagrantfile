require 'yaml'
require File.join(File.dirname(__FILE__), 'lib', 'deep_merge')

# Load up Config Files
begin
  profiles = YAML::load_file(File.join(File.dirname(__FILE__), 'config', 'nodes.yml'))

  ['chef', 'puppet'].each do |type|
    if File.exists?(File.join(File.dirname(__FILE__), 'config', "provisioner_#{type}.yml"))
      provisioner_data = YAML::load_file(File.join(File.dirname(__FILE__), 'config', "provisioner_#{type}.yml"))
      instance_variable_set("@" + type + "_provisioner_defaults", provisioner_data)
    end
  end
rescue => e
  puts "Your config file is missing. Please create the 'nodes.yml' file in the config directory: #{e}"
  exit
end

# Ignore any and all YAML blocks with these keys.
# Typically, this should be used for any YAML anchors
# that may be reused for other Vagrantbox definitions
ignore_config = ['default']

Vagrant::Config.run do |config|
  profiles.each do |profile, node_config|
    # Bail out if it is one of our special 'ignore' config blocks
    next if ignore_config.include?(profile.to_s)
    config.vm.define profile do |config|
      # Setup VBox
      config.vm.box = node_config['vbox']
      config.vm.box_url = node_config['vbox_url']

      # Configure Hostname
      host_name = node_config.has_key?("orgname") ? "#{profile.to_s}.#{node_config['orgname']}" : profile.to_s
      config.vm.host_name = host_name

      # Configure memory and CPU
      config.vm.customize ["modifyvm", :id, "--memory", node_config['memory_size'].to_s] if node_config.has_key?('memory_size')
      config.vm.customize ["modifyvm", :id, "--cpus", node_config['cpu_count'].to_s] if node_config.has_key?('cpu_count')

      # Configure Network
      if node_config.has_key?('ip')
        netmask = node_config.has_key?('netmask') ? node_config['netmask'] : '255.255.255.0'
        config.vm.network :hostonly, node_config['ip'], :netmask => netmask
      end

      # Configure any host-based port forwards
      if node_config.has_key?('ports')
        node_config['ports'].each { |k,v| config.vm.forward_port(v['guest'], v['host']) }
      end

      # custom mounts
      if node_config.has_key?('mounts')
        node_config['mounts'].each { |desc, mount| config.vm.share_folder("#{desc}","#{mount['guest']}","#{mount['host']}", :create => 'true' ) }
      end

      # Setup Puppet Provisioner
      if node_config.has_key?('puppet')
        # Import any defaults set by the Puppet Provisioner
        node_config.deep_merge!(@puppet_provisioner_defaults) if !@puppet_provisioner_defaults.nil?

        config.vm.provision :puppet do |puppet|
          puppet.module_path    = node_config['puppet']['modules']
          puppet.manifests_path = node_config['puppet']['manifests_path']
          puppet.manifest_file  =
            node_config['puppet'].has_key?('manifest_file') ? node_config['puppet']['manifest_file'] : "#{profile.to_s}.pp"

          # Setup Puppet Graphing
          if node_config['puppet']['options'].include?('--graph')
            begin
              graph_dir = File.join(File.dirname(__FILE__), 'graph')
              [graph_dir, "#{graph_dir}/#{host_name}"].each { |d| Dir.mkdir(d) if !File.directory?(d) }
              node_config['puppet']['options'] << "--graphdir=/vagrant/graph/#{host_name}"
            rescue => e
              puts "Unable to create Puppet Graph Directory: #{e}"
            end
          end

          # Puppet Options must be the last option to ensure any additions are included
          puppet.options = node_config['puppet']['options'].join(' ')
        end
      end

      # Setup Chef Provisioner
      if node_config.has_key?('chef')
        # Import any defaults set by the Chef Provisioner
        node_config.deep_merge!(@chef_provisioner_defaults) if !@chef_provisioner_defaults.nil?

        config.vm.provision :chef_client do |chef|

          # Set up some organization specific values based on environment variable above.
          chef.chef_server_url = "https://api.opscode.com/organizations/#{node_config['orgname']}"
          chef.validation_key_path = "#{File.dirname(__FILE__)}/../.chef/#{node_config['orgname']}-validator.pem"
          chef.validation_client_name = "#{node_config['orgname']}-validator"

          # Change the node/client name for the Chef Server
          chef.node_name = "#{ENV['USER']}-#{profile}-vagrant"
          chef.environment = node_config['chef']['environment']

          # Put the client.rb in /etc/chef so chef-client can be run w/o specifying
          chef.provisioning_path = "/etc/chef"

          chef.log_level      = node_config['chef']['log_level'].to_sym
          node_config['chef']['base_roles'].each do |r|
            chef.add_role r
          end
        end
      end
    end
  end
end
